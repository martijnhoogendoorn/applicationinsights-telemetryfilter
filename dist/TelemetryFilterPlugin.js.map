{"version":3,"file":"TelemetryFilterPlugin.js","sourceRoot":"","sources":["../src/TelemetryFilterPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { RemoteDependencyData, IPageViewTelemetry, IMetricTelemetry, IAppInsights, IConfig } from '@microsoft/applicationinsights-common';\r\nimport { IPlugin, IConfiguration, IAppInsightsCore, ITelemetryPlugin, BaseTelemetryPlugin, CoreUtils, ITelemetryItem, IProcessTelemetryContext, ITelemetryPluginChain, _InternalMessageId, LoggingSeverity, ICustomProperties } from \"@microsoft/applicationinsights-core-js\";\r\nimport { ITelemetryFilterExtensionConfig } from './Interfaces/ITelemetryFilterExtensionConfig';\r\n\r\nexport default class FilterPlugin extends BaseTelemetryPlugin {\r\n    public priority : number = 200;\r\n    public identifier: string = \"TelemetryFilterPlugin\";\r\n\r\n    private _extensionConfig!: ITelemetryFilterExtensionConfig | undefined;\r\n\r\n    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?:ITelemetryPluginChain) {\r\n        super.initialize(config, core, extensions, pluginChain);\r\n        \r\n        this._extensionConfig =\r\n            config.extensionConfig && config.extensionConfig[this.identifier]\r\n                ? (config.extensionConfig[this.identifier] as ITelemetryFilterExtensionConfig)\r\n                : undefined;\r\n    }\r\n\r\n    /**\r\n     * Filters out configured information from the telemetry event prior to sending it to Application Insights\r\n     * @param event The event that needs to be processed\r\n     */\r\n    processTelemetry(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext) {\r\n        if(this._extensionConfig !== undefined) {\r\n            // Only process RemoteDependency (Ajax and fetch requests)\r\n            if(event.baseType === RemoteDependencyData.dataType) {\r\n                this.processHeaders(event.baseData!.properties?.requestHeaders);\r\n                this.replaceSimpleProperty(event.baseData, 'name', this._extensionConfig.filteredName);\r\n                this.replaceSimpleProperty(event.baseData, 'data', this._extensionConfig.filteredData);\r\n            }\r\n        }\r\n\r\n        this.processNext(event, itemCtx!);\r\n    }\r\n\r\n    private replaceSimpleProperty(baseData: any, propertyName: string, replacementConfig : string[2]) {\r\n        let configItem = this.getPropertyCaseInsensitive(this._extensionConfig, `filtered${propertyName}`);\r\n        if(baseData !== undefined && configItem !== undefined && replacementConfig !== undefined) {\r\n            if(replacementConfig.length == 1) {\r\n                if(replacementConfig[0] === null) {\r\n                    throw new RangeError(`The replacement configuration for a unitary field (${configItem}) cannot be set without a replacement value`);\r\n                } else {\r\n                    baseData[propertyName] = replacementConfig[0];\r\n                }\r\n            } else {\r\n                let currentValue = baseData[propertyName];\r\n                if(currentValue !== undefined) {\r\n                    let regexMatcher : string = replacementConfig[0];\r\n                    let regexReplace : string = replacementConfig[1];\r\n                    \r\n                    if(regexMatcher.match(currentValue) !== null) {\r\n                        baseData[propertyName] = currentValue.replace(regexMatcher, regexReplace);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private processHeaders(headers: any) {\r\n        if(headers !== undefined && this._extensionConfig.filteredHeaders !== undefined) {            \r\n            CoreUtils.arrForEach(Object.keys(this._extensionConfig.filteredHeaders), filteredHeader => {\r\n                // Ensure we ignore the case of the header\r\n                let headerProperty = this.getPropertyCaseInsensitive(headers, filteredHeader);\r\n                // In case we found a match between configured and case insensitive property of the headers\r\n                if(filteredHeader !== undefined && headerProperty !== undefined) {\r\n                    // If a replacement value is configured\r\n                    if(this._extensionConfig?.filteredHeaders![filteredHeader]) {\r\n                        const headerConfig = this._extensionConfig?.filteredHeaders![filteredHeader];\r\n                        // Enter the replacement value\r\n                        if(headerConfig.length == 1) {\r\n                            headers[headerProperty] = headerConfig[0];\r\n                        } else {\r\n                            let currentValue : string = headers[headerProperty];\r\n                            if(currentValue !== undefined) {\r\n                                let regexMatcher : string = headerConfig[0];\r\n                                let regexReplace : string = headerConfig[1];\r\n\r\n                                if(regexMatcher.match(currentValue) !== null) {\r\n                                    headers[headerProperty] = currentValue.replace(regexMatcher, regexReplace);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Otherwise, silently delete the property\r\n                        delete headers[headerProperty];\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private getPropertyCaseInsensitive(object : any, key : string) {\r\n        return Object.keys(object).filter(function(k) {\r\n            return k.toLowerCase() === key.toLowerCase();\r\n        })[0];\r\n    } \r\n}\r\n"]}